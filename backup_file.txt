"integer" { return INT;}
"float" {return FLOAT;}
"char" {return CHAR;}
"string" {return STRING;}
"bool" {return BOOL;}
"class" {return CLASS;}
"const" { return CONST;}

"+" {return '+';}
"-" {return '-';}
"*" {return '*';}
"/" {return '/';}
"%" {return '%';}
"<" {return >=;}
">" {return >=;}
"==" {return >=;}
"<=" {return >=;}
">=" {return >=;}
"&&" {return &&;}
"||" {return ||;}
":=" {return ASSIGN;}

"Eval" {return EVAL;}

"while" {return WHILE;}
"for" {return FOR;}
"if" {return IF;}

"main(){" {return BGIN;}
"}" {return END;}

"private" {return PRV;}
"public" {return PUB;}
"new" {return NEW;}

[_a-zA-Z][_a-zA-Z0-9]* {return ID;}
[0-9]+ {return NR;}
"'"[a-zA-Z]"'" {return CHAR;}
\"[^"\n]*["\n] {return STRING;}

"to_upper()" { return TOUPPER;}
"to_lower()" { return TOLOWER;}
"length()" {return LENGTH;}





















const int @a;
const string @b := ''ana are mere'';
char @c := 't';
int @x := 10, @y := 11;
string @stringda1;
int @v[20];

int @funct1(int @x, int @y){
    int @S := 0;
    If(@x < @y){
        int @a := @S;
        @v[4] := 5;
        @v[5] := @a;
    };
    For (@i := @v[4] ; @i < @b ; @i := @i + 1){
        int @a := @b;
        If(@x < @y){
            int @a := @S;
            @v[4] := 5;
            @v[5] := @a;
        };
    };
    While(@a < 4){
        int @a := @b;
        @abc := ''afara este frumos'';
    };
    @Classsa @new_clasa := new @Classsa;
};
int @abC(){
    float @nr;
};
class @da {
    private:
        int @a;
        string @da(int @x,int @y);
        int @cev(){
            float @nr;
        };
    public:
        int @a;
        string @da(int @x,int @y);
        int @abC(){
            float @nr;
            @a.length();
        };
};
begin_progr
    @x := @y;
    @x := @x;
    For ( @s := @v[4] ; @s < @b ; @s := @s + 1){
        int @a := @b;
    };
    int @x := 10;
    int @x := @b;
    @asd(10,20);
    @abd(@a*@y+@b*3+200-2, 15, @func(@a,@b));
    @y := @a + @b;
    @a.to_upper();
    @a.to_lower();
    @a.length();
end_progr














%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "y.tab.h"
%}
%option noyywrap
%%

"integer" {return INT;}
"float" {return FLOAT;}
"char" {return CHAR;}
"string" {return STRING;}
"bool" {return BOOL;}
"const" {return CONST;}

"+" {return ADD;}
"-" {return DEC;}
"*" {return MUL;}
"/" {return SUB;}
"%" {return MOD;}
"<" {return LT;}
">" {return GT;}
"==" {return EQ;}
"<=" {return LET;}
">=" {return GET;}
"&&" {return AND;}
"||" {return OR;}
":=" {return ASSIGN;}

"Eval" {return EVAL;}

"while" {return WHILE;}
"for" {return FOR;}
"if" {return IF;}

"main(){" {return BGIN;}
"end}" {return END;}

"private" {return PRV;}
"public" {return PUB;}
"new" {return NEW;}
"class" {return CLASS;}

[_a-zA-Z][_a-zA-Z0-9]* {return ID;}

[+-]?[1-9][0-9]*|0 {yylval.intval = atoi(yytext); return NR;}

[ \t] ;
\n {yylineno++;}
. {return yytext[0];}
%%














%{
#include <stdio.h>
#include <string.h>
#include "limbaj.h"
extern FILE* yyin;
extern FILE* yyout;
extern char* yytext;
extern int yylineno;
extern unsigned program_status;
int yylex();
void yyerror(const char* error_message);
%}
%union{
   char* strval;
   int intval;
}

%start progr

%token EVAL

%token<strval> ID
%token<intval> NR

%type<intval> calculate eval_exp

%left '+' '-'
%left '*' '/' '%'

%%

progr
   : calculate
   ;

calculate
   : EVAL '(' eval_exp ')' {printf("Valoare: %i\n", program_status);}
   ;

eval_exp
   : eval_exp '+' eval_exp {$$ = $1 + $3;}
   | eval_exp '-' eval_exp {$$ = $1 - $3;}
   | eval_exp '*' eval_exp {$$ = $1 * $3;}
   | eval_exp '/' eval_exp {$$ = $1 / $3;}
   | eval_exp '%' eval_exp {$$ = $1 % $3;}
   | '(' eval_exp ')' {$$ = $2;}
   | '-' eval_exp {$$ = -$2;}
   | NR {$$ = $1;}
   | ID {;}
   ;

%%
void yyerror(const char* error_message)
{
   printf("Line %d: %s\n", yylineno, error_message);
}

int main(int argc, char** argv){
   // Input file
   yyin=fopen(argv[1],"r");
   // Tables configuration
   tables_config();
   
   yyparse();
   print_results();
   fclose(yyin);
}

















#include <stdlib.h>

#define OUTPUT_FILE "symbol_table.txt"

unsigned program_status = 1;

void tables_config()
{
   printf("Test\n");
}

void print_results()
{
   // Delete delete the existing symbol table.
   if(remove(OUTPUT_FILE) == 0)
      printf("Deleted successfully.\n");
   else
      printf("Unable to delete the file. Don't worry, maybe it didn't exist.\n");

   // Create symbol table.
   FILE *symbol_table;
   symbol_table = fopen(OUTPUT_FILE, "w");
   if(!symbol_table)
   {
      printf("Unable to open %s.\n", OUTPUT_FILE);
      exit(EXIT_FAILURE);
   }
   printf("Things.\n");
}
